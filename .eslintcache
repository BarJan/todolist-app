[{"C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\index.js":"1","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\App.js":"2","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\reportWebVitals.js":"3","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\pages\\todoPage.js":"4","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\models\\TodoMission.js":"5","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\pages\\TodoPage.js":"6","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\components\\TodoCard\\TodoCard.js":"7","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\components\\InputField\\InputField.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":835,"mtime":1612801786677,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":1221,"mtime":1609754514847,"results":"13","hashOfConfig":"14"},{"size":558,"mtime":1612793933426,"results":"15","hashOfConfig":"10"},{"size":5506,"mtime":1612820313068,"results":"16","hashOfConfig":"10"},{"size":1675,"mtime":1612813735730,"results":"17","hashOfConfig":"10"},{"size":1553,"mtime":1612816355034,"results":"18","hashOfConfig":"10"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1xq6ht3",{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"26iaxa",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"21"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\index.js",[],["39","40"],"C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\App.js",["41","42","43","44"],"import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport TodoMission from './models/TodoMission';\nimport TodoPage from './pages/TodoPage';\n\nfunction App() {\n  const [taskList, setTaskList] = useState([]);\n\n  // useEffect(() =>{\n  //   const myStorage = localStorage;\n  //   if(myStorage.getItem('todoList') !== null){\n  //     const fromStorage = JSON.parse(myStorage.getItem('todoList')).map((todo) => new TodoMission(todo));\n  //     setTaskList(fromStorage);\n  //   }\n  // },[])\n\n  // function UpdateStorage(todoList){\n  //   const myStorage = localStorage;\n  //   const dataToStorage = JSON.stringify(todoList);\n  //   myStorage.setItem('todoList', dataToStorage);\n  // }\n\n\n  return (\n    <div className=\"App\">\n      <TodoPage />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\reportWebVitals.js",[],"C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\pages\\todoPage.js",["45","46","47"],"C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\models\\TodoMission.js",[],"C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\pages\\TodoPage.js",["48","49"],"C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\components\\TodoCard\\TodoCard.js",["50","51"],"import { useState } from \"react\";\r\nimport { Button, Card, Form, FormCheck, FormGroup, Modal, Row } from \"react-bootstrap\";\r\nimport \"../TodoCard/TodoCard.css\"\r\n\r\nfunction TodoCard (props){\r\n    const { updateTask, removeT, todo} = props;\r\n    const [deleteTask, setDeleteTask] = useState(false);\r\n    \r\n    return(\r\n            <Row  className={\"r-TodoCard\"}>\r\n                <Card>\r\n                    <Form.Group >\r\n                        <Form.Check disabled={todo.isComplete} type=\"checkbox\" checked={todo.isComplete} label={todo.text} onChange={()=> updateTask(todo.id)}/>\r\n                    </Form.Group>\r\n                    <Button id=\"delete\" type=\"button\" onClick={()=> {todo.isComplete? removeT(todo.id) : setDeleteTask(true);}}>X</Button>\r\n                </Card>\r\n                {deleteTask ?\r\n                <Modal show={deleteTask} onHide={setDeleteTask}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Delete Task</Modal.Title>\r\n                    </Modal.Header>\r\n                \r\n                    <Modal.Body>\r\n                        <p>This task has not completed yet</p>\r\n                        <p>Are you sure you want to delete this task?</p>\r\n                    </Modal.Body>\r\n\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={()=> setDeleteTask(false)}>Cancel</Button>\r\n                        <Button variant=\"primary\" onClick={()=> {removeT(todo.id); setDeleteTask(false);}}>Delete</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                : null}\r\n            </Row>\r\n        \r\n    );\r\n}\r\n\r\nexport default TodoCard;","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\components\\InputField\\InputField.js",[],["52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":2,"column":10,"nodeType":"60","messageId":"61","endLine":2,"endColumn":19},{"ruleId":"58","severity":1,"message":"62","line":4,"column":8,"nodeType":"60","messageId":"61","endLine":4,"endColumn":19},{"ruleId":"58","severity":1,"message":"63","line":8,"column":10,"nodeType":"60","messageId":"61","endLine":8,"endColumn":18},{"ruleId":"58","severity":1,"message":"64","line":8,"column":20,"nodeType":"60","messageId":"61","endLine":8,"endColumn":31},{"ruleId":"58","severity":1,"message":"65","line":11,"column":24,"nodeType":"60","messageId":"61","endLine":11,"endColumn":37},{"ruleId":"66","severity":1,"message":"67","line":19,"column":24,"nodeType":"68","endLine":19,"endColumn":85},{"ruleId":"69","severity":2,"message":"70","line":22,"column":40,"nodeType":"71","endLine":22,"endColumn":48},{"ruleId":"66","severity":1,"message":"72","line":26,"column":7,"nodeType":"73","endLine":26,"endColumn":17,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":95,"column":21,"nodeType":"77","endLine":95,"endColumn":39},{"ruleId":"58","severity":1,"message":"78","line":2,"column":30,"nodeType":"60","messageId":"61","endLine":2,"endColumn":39},{"ruleId":"58","severity":1,"message":"79","line":2,"column":41,"nodeType":"60","messageId":"61","endLine":2,"endColumn":50},{"ruleId":"54","replacedBy":"80"},{"ruleId":"56","replacedBy":"81"},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'TodoMission' is defined but never used.","'taskList' is assigned a value but never used.","'setTaskList' is assigned a value but never used.","'setTodoFilter' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'activCounter' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","react/jsx-no-undef","'TodoCard' is not defined.","JSXIdentifier","React Hook useEffect has a missing dependency: 'todoList'. Either include it or remove the dependency array.","ArrayExpression",["84"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'FormCheck' is defined but never used.","'FormGroup' is defined but never used.",["82"],["83"],"no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},"Update the dependencies array to be: [checkAll, todoList]",{"range":"87","text":"88"},[893,903],"[checkAll, todoList]"]