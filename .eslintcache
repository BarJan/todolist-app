[{"C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\index.js":"1","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\App.js":"2","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\reportWebVitals.js":"3","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\pages\\todoPage.js":"4","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\models\\TodoMission.js":"5","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\pages\\TodoPage.js":"6","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\components\\TodoCard\\TodoCard.js":"7","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\components\\InputField\\InputField.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":835,"mtime":1612801786677,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":1221,"mtime":1609754514847,"results":"13","hashOfConfig":"14"},{"size":558,"mtime":1612793933426,"results":"15","hashOfConfig":"10"},{"size":5506,"mtime":1612819711374,"results":"16","hashOfConfig":"10"},{"size":1675,"mtime":1612813735730,"results":"17","hashOfConfig":"10"},{"size":1553,"mtime":1612816355034,"results":"18","hashOfConfig":"10"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1xq6ht3",{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"26iaxa",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"21"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"21"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\index.js",[],["39","40"],"C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\App.js",["41","42","43","44"],"import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport TodoMission from './models/TodoMission';\nimport TodoPage from './pages/TodoPage';\n\nfunction App() {\n  const [taskList, setTaskList] = useState([]);\n\n  // useEffect(() =>{\n  //   const myStorage = localStorage;\n  //   if(myStorage.getItem('todoList') !== null){\n  //     const fromStorage = JSON.parse(myStorage.getItem('todoList')).map((todo) => new TodoMission(todo));\n  //     setTaskList(fromStorage);\n  //   }\n  // },[])\n\n  // function UpdateStorage(todoList){\n  //   const myStorage = localStorage;\n  //   const dataToStorage = JSON.stringify(todoList);\n  //   myStorage.setItem('todoList', dataToStorage);\n  // }\n\n\n  return (\n    <div className=\"App\">\n      <TodoPage />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\reportWebVitals.js",[],"C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\pages\\todoPage.js",["45","46","47"],"C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\models\\TodoMission.js",[],"C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\pages\\TodoPage.js",["48","49"],"import \"../pages/TodoPage.css\"\r\nimport { Button, Col, Container, Form, Jumbotron, Row } from \"react-bootstrap\";\r\nimport TodoCard from \"../components/TodoCard/TodoCard\";\r\nimport InputField from \"../components/InputField/InputField\";\r\nimport TodoMission from \"../models/TodoMission\";\r\nimport logo from \"../../src/check-list.svg\";\r\n\r\nconst { useState, useEffect } = require(\"react\");\r\n\r\nfunction TodoPage(props){\r\n    const [todoList, setTodoList] = useState([]);\r\n    const [todoFilter, setTodoFilter] = useState(\"all\");\r\n    const [activeCounter, setActiveCounter] = useState(0);\r\n\r\n    const [checkAll, setCheckAll] = useState(false);\r\n    \r\n    let listToView = [];\r\n\r\n    useEffect(() =>{\r\n        let newTList = [...todoList];\r\n        newTList.forEach(todo => {\r\n            todo.isComplete = checkAll;\r\n        });\r\n        UpdateCounter(newTList);\r\n        setTodoList(newTList);\r\n    },[checkAll]);\r\n\r\n    useEffect(() =>{\r\n        const myStorage = localStorage;\r\n        if(myStorage.getItem('todoList') !== null){\r\n          const fromStorage = JSON.parse(myStorage.getItem('todoList')).map((todo) => new TodoMission(todo));\r\n          setTodoList(fromStorage);\r\n        }\r\n    },[]);\r\n\r\n    useEffect(() =>{\r\n        updateLocalStorage(todoList);\r\n    },[todoList]);\r\n    \r\n    \r\n\r\n    function updateLocalStorage(todoListTosave){\r\n        const myStorage = localStorage;\r\n        const dataToStorage = JSON.stringify(todoListTosave);\r\n        myStorage.setItem('todoList', dataToStorage);\r\n    }\r\n\r\n    function Filter() {\r\n        if(todoFilter === \"active\"){\r\n            return(todoList.filter(todo=>!(todo.isComplete)).map((todo,index) => <TodoCard key={index} updateTask={UpdateTodo} removeT={RemoveTask} todo={todo}/>));\r\n        }\r\n        else if(todoFilter === \"complete\"){\r\n            return(todoList.filter(todo=>(todo.isComplete)).map((todo,index) => <TodoCard key={index} updateTask={UpdateTodo} removeT={RemoveTask} todo={todo}/>));\r\n        }\r\n        return(todoList.map((todo,index) => <TodoCard key={index} updateTask={UpdateTodo} removeT={RemoveTask} todo={todo}/>));\r\n    }\r\n\r\n    function UpdateCounter(newTList){\r\n        if(newTList.length === 0)\r\n            setActiveCounter(0);\r\n        else\r\n            setActiveCounter(newTList.filter(todo=>!(todo.isComplete)).length);\r\n    }\r\n\r\n    function UpdateTodo(id){\r\n        let newTList = [...todoList];\r\n        const found = newTList.find(todo => todo.id === id);\r\n        found.isComplete = !found.isComplete;\r\n        UpdateCounter(newTList);\r\n        setTodoList(newTList);\r\n    }\r\n\r\n    function AddNewTodo(newTodo){\r\n        let newTList = [...todoList];\r\n        newTList.push(newTodo);\r\n        UpdateCounter(newTList);\r\n        setTodoList(newTList);\r\n    }\r\n\r\n    function RemoveTask(id){\r\n        let newTList = [...todoList];\r\n        const toDlt = newTList.find(todo => todo.id === id);\r\n        const index = newTList.indexOf(toDlt);\r\n        newTList.splice(index, 1);\r\n        UpdateCounter(newTList);\r\n        setTodoList(newTList);\r\n    }\r\n\r\n    listToView = Filter();\r\n\r\n    return(\r\n        <div className=\"tpage\">\r\n            <Jumbotron>\r\n                <Container>\r\n                    <img src={logo} />\r\n                    <h1>reacToDo List</h1>\r\n                </Container>\r\n            </Jumbotron>\r\n            <Container className={\"container-tpage\"}>\r\n                <InputField addNewTask={AddNewTodo} />\r\n                <Row className=\"tpage-info-row\">\r\n                    <Col md={6} style={{padding: 0, margin:0}}>\r\n                        <Row className=\"tpage-active-sum\">\r\n                            <h3>{activeCounter} items left</h3>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col md={6} style={{padding: 0}}>\r\n                        <Row className=\"tpage-btns-row\">\r\n                            <Col xl={4} lg={8} md={8} sm={8} xs={8}>\r\n                                <Button variant={todoFilter===\"all\" ? \"secondary\" : \"outline-secondary\"} value={1} onClick={()=> setTodoFilter(\"all\")}>All</Button>\r\n                            </Col>\r\n                            <Col xl={4} lg={8} md={8} sm={8} xs={8}>\r\n                                <Button variant={todoFilter===\"active\" ? \"secondary\" : \"outline-secondary\"} value={2} onClick={()=> setTodoFilter(\"active\")}>Active</Button>\r\n                            </Col>\r\n                            <Col xl={4} lg={8} md={8} sm={8} xs={8}>\r\n                                <Button variant={todoFilter===\"complete\" ? \"secondary\" : \"outline-secondary\"} value={3} onClick={()=> setTodoFilter(\"complete\")}>Completed</Button>    \r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row style={{margin: 0, paddingLeft: \"6px\"}}>\r\n                    <Form.Group controlId=\"formBasicCheckboxAll\">\r\n                        <Form.Check checked={checkAll} type=\"checkbox\" label=\"Check All\" onChange={() => setCheckAll(!checkAll)}/>\r\n                    </Form.Group>\r\n                    <Button className=\"deleteAll\" style={{display: (checkAll? \"inline-block\" : \"none\")}} type=\"button\" onClick={() => {setTodoList([]); setCheckAll(false)}} >Delete All</Button>\r\n                </Row>\r\n                \r\n                <div className={\"d-card\"}>\r\n                        {listToView}\r\n                </div>\r\n                \r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoPage;","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\components\\TodoCard\\TodoCard.js",["50","51"],"import { useState } from \"react\";\r\nimport { Button, Card, Form, FormCheck, FormGroup, Modal, Row } from \"react-bootstrap\";\r\nimport \"../TodoCard/TodoCard.css\"\r\n\r\nfunction TodoCard (props){\r\n    const { updateTask, removeT, todo} = props;\r\n    const [deleteTask, setDeleteTask] = useState(false);\r\n    \r\n    return(\r\n            <Row  className={\"r-TodoCard\"}>\r\n                <Card>\r\n                    <Form.Group >\r\n                        <Form.Check disabled={todo.isComplete} type=\"checkbox\" checked={todo.isComplete} label={todo.text} onChange={()=> updateTask(todo.id)}/>\r\n                    </Form.Group>\r\n                    <Button id=\"delete\" type=\"button\" onClick={()=> {todo.isComplete? removeT(todo.id) : setDeleteTask(true);}}>X</Button>\r\n                </Card>\r\n                {deleteTask ?\r\n                <Modal show={deleteTask} onHide={setDeleteTask}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Delete Task</Modal.Title>\r\n                    </Modal.Header>\r\n                \r\n                    <Modal.Body>\r\n                        <p>This task has not completed yet</p>\r\n                        <p>Are you sure you want to delete this task?</p>\r\n                    </Modal.Body>\r\n\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={()=> setDeleteTask(false)}>Cancel</Button>\r\n                        <Button variant=\"primary\" onClick={()=> {removeT(todo.id); setDeleteTask(false);}}>Delete</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                : null}\r\n            </Row>\r\n        \r\n    );\r\n}\r\n\r\nexport default TodoCard;","C:\\Users\\barjan\\Desktop\\front-end\\todolist-app\\src\\components\\InputField\\InputField.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":2,"column":10,"nodeType":"58","messageId":"59","endLine":2,"endColumn":19},{"ruleId":"56","severity":1,"message":"60","line":4,"column":8,"nodeType":"58","messageId":"59","endLine":4,"endColumn":19},{"ruleId":"56","severity":1,"message":"61","line":8,"column":10,"nodeType":"58","messageId":"59","endLine":8,"endColumn":18},{"ruleId":"56","severity":1,"message":"62","line":8,"column":20,"nodeType":"58","messageId":"59","endLine":8,"endColumn":31},{"ruleId":"56","severity":1,"message":"63","line":11,"column":24,"nodeType":"58","messageId":"59","endLine":11,"endColumn":37},{"ruleId":"64","severity":1,"message":"65","line":19,"column":24,"nodeType":"66","endLine":19,"endColumn":85},{"ruleId":"67","severity":2,"message":"68","line":22,"column":40,"nodeType":"69","endLine":22,"endColumn":48},{"ruleId":"64","severity":1,"message":"70","line":26,"column":7,"nodeType":"71","endLine":26,"endColumn":17,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":95,"column":21,"nodeType":"75","endLine":95,"endColumn":39},{"ruleId":"56","severity":1,"message":"76","line":2,"column":30,"nodeType":"58","messageId":"59","endLine":2,"endColumn":39},{"ruleId":"56","severity":1,"message":"77","line":2,"column":41,"nodeType":"58","messageId":"59","endLine":2,"endColumn":50},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'TodoMission' is defined but never used.","'taskList' is assigned a value but never used.","'setTaskList' is assigned a value but never used.","'setTodoFilter' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'activCounter' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","react/jsx-no-undef","'TodoCard' is not defined.","JSXIdentifier","React Hook useEffect has a missing dependency: 'todoList'. Either include it or remove the dependency array.","ArrayExpression",["80"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'FormCheck' is defined but never used.","'FormGroup' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [checkAll, todoList]",{"range":"83","text":"84"},[893,903],"[checkAll, todoList]"]