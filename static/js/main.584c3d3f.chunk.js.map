{"version":3,"sources":["models/TodoMission.js","components/TodoCard/TodoCard.js","components/InputField/InputField.js","pages/TodoPage.js","App.js","reportWebVitals.js","index.js"],"names":["TodoMission","todoMissionOrText","isComplete","this","id","uuid","text","TodoCard","props","updateTask","removeT","todo","useState","deleteTask","setDeleteTask","Row","className","Card","FormCheck","disabled","type","checked","label","onChange","Button","onClick","Modal","Dialog","Header","closeButton","Title","Body","Footer","variant","InputField","addNewTask","inputValue","setInputValue","htmlFor","InputGroup","Prepend","Text","FormControl","value","aria-describedby","as","rows","onKeyUp","e","keyCode","preventDefault","newTask","newT","addTask","target","require","useEffect","TodoPage","listToView","todoList","setTodoList","todoFilter","setTodoFilter","activeCounter","setActiveCounter","updateLocalStorage","todoListTosave","myStorage","localStorage","dataToStorage","JSON","stringify","setItem","UpdateCounter","newTList","length","filter","UpdateTodo","find","RemoveTask","toDlt","index","indexOf","splice","getItem","fromStorage","parse","map","Jumbotron","Container","newTodo","push","Col","md","xl","lg","sm","xs","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.584c3d3f.chunk.js","sourcesContent":["import uuid from 'react-uuid'\r\n\r\nclass TodoMission{\r\n\r\n    constructor(todoMissionOrText, isComplete){\r\n        \r\n        if(typeof todoMissionOrText === \"object\"){\r\n            this.id = todoMissionOrText.id !== null ? todoMissionOrText.id : uuid();\r\n            this.text = todoMissionOrText.text;\r\n            this.isComplete = todoMissionOrText.isComplete;\r\n        }\r\n        else{\r\n            this.id = uuid();\r\n            this.text = todoMissionOrText;\r\n            this.isComplete = isComplete;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default TodoMission;","import { useState } from \"react\";\r\nimport { Button, Card, FormCheck, Modal, Row } from \"react-bootstrap\";\r\nimport \"../TodoCard/TodoCard.css\"\r\n\r\nfunction TodoCard (props){\r\n    const { updateTask, removeT, todo} = props;\r\n    const [deleteTask, setDeleteTask] = useState(false);\r\n    \r\n    return(\r\n            <Row  className={\"r-TodoCard\"}>\r\n                <Card>\r\n                    <FormCheck disabled={todo.isComplete} type=\"checkbox\" checked={todo.isComplete} label={todo.text} onChange={()=> updateTask(todo.id)}/>\r\n                    <Button id=\"delete\" type=\"button\" onClick={()=> {todo.isComplete? removeT(todo.id) : setDeleteTask(true);}}>X</Button>\r\n                </Card>\r\n                {deleteTask ?\r\n                <Modal.Dialog>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Delete Task</Modal.Title>\r\n                    </Modal.Header>\r\n                \r\n                    <Modal.Body>\r\n                        <p>This task has not completed yet</p>\r\n                        <p>Are you sure you want to delete this task?</p>\r\n                    </Modal.Body>\r\n\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={()=> setDeleteTask(false)}>Cancel</Button>\r\n                        <Button variant=\"primary\" onClick={()=> {removeT(todo.id); setDeleteTask(false);}}>Delete</Button>\r\n                    </Modal.Footer>\r\n                </Modal.Dialog>\r\n                : null}\r\n            </Row>\r\n        \r\n    );\r\n}\r\n\r\nexport default TodoCard;","import { useState } from \"react\";\r\nimport { FormControl, InputGroup, Row } from \"react-bootstrap\";\r\nimport TodoMission from \"../../models/TodoMission\";\r\n\r\nfunction InputField(props){\r\n    const {addNewTask} = props;\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    \r\n    function addTask(newTask){\r\n        if(newTask !== '\\n'){\r\n            const newT = new TodoMission(newTask, false);\r\n            addNewTask(newT);\r\n        }\r\n        setInputValue(\"\");\r\n    }\r\n\r\n\r\n    return(\r\n        <Row>\r\n            <label htmlFor=\"basic-url\">Enter new task for your ToDo list</label>\r\n            <InputGroup className=\"mb-3\">\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text id=\"basic-addon3\">\r\n                        Write here:\r\n                    </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl id=\"basic-url\" value={inputValue} aria-describedby=\"basic-addon3\" as=\"textarea\" rows={3} onKeyUp ={(e) =>{if (e.keyCode === 13) {\r\n                                                                                                                e.preventDefault();\r\n                                                                                                                addTask(e.target.value)\r\n                                                                                                                }\r\n                                                                                                            }\r\n                                                                                                        } onChange={(e)=>setInputValue(e.target.value)}/>\r\n            </InputGroup>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default InputField;\r\n\r\n","import \"../pages/TodoPage.css\"\r\nimport { Button, Col, Container, Jumbotron, Row } from \"react-bootstrap\";\r\nimport TodoCard from \"../components/TodoCard/TodoCard\";\r\nimport InputField from \"../components/InputField/InputField\";\r\nimport TodoMission from \"../models/TodoMission\";\r\n\r\nconst { useState, useEffect } = require(\"react\");\r\n\r\nfunction TodoPage(props){\r\n    const [todoList, setTodoList] = useState([]);\r\n    const [todoFilter, setTodoFilter] = useState(\"all\");\r\n    const [activeCounter, setActiveCounter] = useState(0);\r\n    \r\n    let listToView = [];\r\n\r\n    useEffect(() =>{\r\n        const myStorage = localStorage;\r\n        if(myStorage.getItem('todoList') !== null){\r\n          const fromStorage = JSON.parse(myStorage.getItem('todoList')).map((todo) => new TodoMission(todo));\r\n          setTodoList(fromStorage);\r\n        }\r\n      },[]);\r\n    \r\n      function updateLocalStorage(todoListTosave){\r\n        const myStorage = localStorage;\r\n        const dataToStorage = JSON.stringify(todoListTosave);\r\n        myStorage.setItem('todoList', dataToStorage);\r\n      }\r\n\r\n    function Filter() {\r\n        if(todoFilter === \"active\"){\r\n            return(todoList.filter(todo=>!(todo.isComplete)).map((todo,index) => <TodoCard key={index} updateTask={UpdateTodo} removeT={RemoveTask} todo={todo}/>));\r\n        }\r\n        else if(todoFilter === \"complete\"){\r\n            return(todoList.filter(todo=>(todo.isComplete)).map((todo,index) => <TodoCard key={index} updateTask={UpdateTodo} removeT={RemoveTask} todo={todo}/>));\r\n        }\r\n        return(todoList.map((todo,index) => <TodoCard key={index} updateTask={UpdateTodo} removeT={RemoveTask} todo={todo}/>));\r\n    }\r\n\r\n    function UpdateCounter(newTList){\r\n        if(newTList.length === 0)\r\n            setActiveCounter(0);\r\n        else\r\n            setActiveCounter(newTList.filter(todo=>!(todo.isComplete)).length);\r\n    }\r\n\r\n    function UpdateTodo(id){\r\n        let newTList = [...todoList];\r\n        const found = newTList.find(todo => todo.id === id);\r\n        found.isComplete = true;\r\n        updateLocalStorage(newTList);\r\n        UpdateCounter(newTList);\r\n        setTodoList(newTList);\r\n    }\r\n\r\n    function AddNewTodo(newTodo){\r\n        let newTList = [...todoList];\r\n        newTList.push(newTodo);\r\n        updateLocalStorage(newTList);\r\n        UpdateCounter(newTList);\r\n        setTodoList(newTList);\r\n    }\r\n\r\n    function RemoveTask(id){\r\n        let newTList = [...todoList];\r\n        const toDlt = newTList.find(todo => todo.id === id);\r\n        const index = newTList.indexOf(toDlt);\r\n        newTList.splice(index, 1);\r\n        updateLocalStorage(newTList);\r\n        UpdateCounter(newTList);\r\n        setTodoList(newTList);\r\n    }\r\n\r\n    listToView = Filter();\r\n\r\n    return(\r\n        <div className=\"tpage\">\r\n            <Jumbotron>\r\n                <Container>\r\n                    <h1>reacToDo List</h1>\r\n                </Container>\r\n            </Jumbotron>\r\n            <Container className={\"container-tpage\"}>\r\n                <InputField addNewTask={AddNewTodo} />\r\n                <Row className=\"tpage-info-row\">\r\n                    <Col md={6}>\r\n                        <Row className=\"tpage-active-sum\">\r\n                            <h3>{activeCounter} items left</h3>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <Row className=\"tpage-btns-row\">\r\n                            <Col xl={4} lg={8} md={8} sm={8} xs={8}>\r\n                                <Button variant={todoFilter===\"all\" ? \"secondary\" : \"outline-secondary\"} value={1} onClick={()=> setTodoFilter(\"all\")}>All</Button>\r\n                            </Col>\r\n                            <Col xl={4} lg={8} md={8} sm={8} xs={8}>\r\n                                <Button variant={todoFilter===\"active\" ? \"secondary\" : \"outline-secondary\"} value={2} onClick={()=> setTodoFilter(\"active\")}>Active</Button>\r\n                            </Col>\r\n                            <Col xl={4} lg={8} md={8} sm={8} xs={8}>\r\n                                <Button variant={todoFilter===\"complete\" ? \"secondary\" : \"outline-secondary\"} value={3} onClick={()=> setTodoFilter(\"complete\")}>Completed</Button>    \r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n                <Row className={\"d-card\"}>\r\n                        {listToView}\r\n                </Row>\r\n                \r\n            </Container>\r\n        </div>\r\n        \r\n    );\r\n\r\n\r\n}\r\n\r\n\r\nexport default TodoPage;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport TodoMission from './models/TodoMission';\nimport TodoPage from './pages/TodoPage';\n\nfunction App() {\n  const [taskList, setTaskList] = useState([]);\n\n  // useEffect(() =>{\n  //   const myStorage = localStorage;\n  //   if(myStorage.getItem('todoList') !== null){\n  //     const fromStorage = JSON.parse(myStorage.getItem('todoList')).map((todo) => new TodoMission(todo));\n  //     setTaskList(fromStorage);\n  //   }\n  // },[])\n\n  // function UpdateStorage(todoList){\n  //   const myStorage = localStorage;\n  //   const dataToStorage = JSON.stringify(todoList);\n  //   myStorage.setItem('todoList', dataToStorage);\n  // }\n\n\n  return (\n    <div className=\"App\">\n      <TodoPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}